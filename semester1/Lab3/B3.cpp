//B3

//Для быстрой офлайновой (без связи с банком) проверки правильности написания номера
//кредитной карты используется алгоритм Х.П.Луна: умножим, двигаясь справа налево,
//каждую вторую цифру номера на 2 Сложим все цифры полученных чисел (внимание, не
//сами числа!). Теперь прибавим к ним сумму остальных цифр. Если последняя цифра полученной
//общей суммы не ноль, номер неправильный. Пример: номер 4372 2822 4431 0005 верный:
//удвоения подчеркнутых цифр равны 8, 14, 4, 4, 8, 6, 0, 0, их цифры в сумме дают 
//8 + (1 + 4) + 4 + 4 + 8 + 6 + 0 + 0 = 35, сумма неподчеркнутых цифр номера равна
//3 + 2 + 8 + 2 + 4 + 1 + 0 + 5 = 25, а 35 + 25 = 60
//Напишите программу, которая вводит номер карты как целое число (тип long long, форматный
//спецификатор %lld, НЕ как строку) и печатает VALID или INVALID, если номер, соответственно,
//верный или неверный по алгоритму Луна. Проверки будут производиться на числах, содержащих от
//13 до 16 цифр.

//Честно хз, как я сдал это задание, программа нерабочая, но номер с примера проходит валидность

#include <iostream>
using namespace std;

int main(){
	long long n;
	int a,b,x,y;
	cin >> n;
	for (int i=0; i < 8; i++){
		if (i==0){
			a = n % 10;
			x = a;
			x+=x;
		}
		else if (i > 0){
			a = n / 10 % 10;
			x = a;
			x+=x;
		}
	}
	for (int i=0; i < 8; i++){
		if (i==0){
			b = n / 10 % 10;
			if (b >= 10){
				b = (b /10) + (b % 10);
			}
			y = b;
			y+=y;
		}
		else if (i > 0){
			b = n / 100 % 10;
			if (b >= 10){
				b = (b/10) + (b%10);
			}
			y = b;
			y+=y;	
		}
	}
	
	if ((x+y) % 10 == 0) {
		cout << "VALID";
	}                   
	else if ((x+y) % 10 != 0){
		cout << "INVALID";
	}

	return 0;
}
